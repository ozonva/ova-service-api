// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package ova_service_api

import (
	context "context"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ServiceAPIClient is the client API for ServiceAPI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ServiceAPIClient interface {
	// Create new service
	CreateServiceV1(ctx context.Context, in *CreateServiceV1Request, opts ...grpc.CallOption) (*CreateServiceV1Response, error)
	// Get service details
	DescribeServiceV1(ctx context.Context, in *DescribeServiceV1Request, opts ...grpc.CallOption) (*DescribeServiceV1Response, error)
	// List services with pagination
	ListServicesV1(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*ListServicesV1Response, error)
	// Remove service
	RemoveServiceV1(ctx context.Context, in *RemoveServiceV1Request, opts ...grpc.CallOption) (*empty.Empty, error)
	// Create multiple services
	MultiCreateServiceV1(ctx context.Context, in *MultiCreateServiceV1Request, opts ...grpc.CallOption) (*empty.Empty, error)
	// Update service
	UpdateServiceV1(ctx context.Context, in *UpdateServiceV1Request, opts ...grpc.CallOption) (*empty.Empty, error)
}

type serviceAPIClient struct {
	cc grpc.ClientConnInterface
}

func NewServiceAPIClient(cc grpc.ClientConnInterface) ServiceAPIClient {
	return &serviceAPIClient{cc}
}

func (c *serviceAPIClient) CreateServiceV1(ctx context.Context, in *CreateServiceV1Request, opts ...grpc.CallOption) (*CreateServiceV1Response, error) {
	out := new(CreateServiceV1Response)
	err := c.cc.Invoke(ctx, "/ova.service.ServiceAPI/CreateServiceV1", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceAPIClient) DescribeServiceV1(ctx context.Context, in *DescribeServiceV1Request, opts ...grpc.CallOption) (*DescribeServiceV1Response, error) {
	out := new(DescribeServiceV1Response)
	err := c.cc.Invoke(ctx, "/ova.service.ServiceAPI/DescribeServiceV1", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceAPIClient) ListServicesV1(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*ListServicesV1Response, error) {
	out := new(ListServicesV1Response)
	err := c.cc.Invoke(ctx, "/ova.service.ServiceAPI/ListServicesV1", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceAPIClient) RemoveServiceV1(ctx context.Context, in *RemoveServiceV1Request, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/ova.service.ServiceAPI/RemoveServiceV1", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceAPIClient) MultiCreateServiceV1(ctx context.Context, in *MultiCreateServiceV1Request, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/ova.service.ServiceAPI/MultiCreateServiceV1", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceAPIClient) UpdateServiceV1(ctx context.Context, in *UpdateServiceV1Request, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/ova.service.ServiceAPI/UpdateServiceV1", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ServiceAPIServer is the server API for ServiceAPI service.
// All implementations must embed UnimplementedServiceAPIServer
// for forward compatibility
type ServiceAPIServer interface {
	// Create new service
	CreateServiceV1(context.Context, *CreateServiceV1Request) (*CreateServiceV1Response, error)
	// Get service details
	DescribeServiceV1(context.Context, *DescribeServiceV1Request) (*DescribeServiceV1Response, error)
	// List services with pagination
	ListServicesV1(context.Context, *empty.Empty) (*ListServicesV1Response, error)
	// Remove service
	RemoveServiceV1(context.Context, *RemoveServiceV1Request) (*empty.Empty, error)
	// Create multiple services
	MultiCreateServiceV1(context.Context, *MultiCreateServiceV1Request) (*empty.Empty, error)
	// Update service
	UpdateServiceV1(context.Context, *UpdateServiceV1Request) (*empty.Empty, error)
	mustEmbedUnimplementedServiceAPIServer()
}

// UnimplementedServiceAPIServer must be embedded to have forward compatible implementations.
type UnimplementedServiceAPIServer struct {
}

func (UnimplementedServiceAPIServer) CreateServiceV1(context.Context, *CreateServiceV1Request) (*CreateServiceV1Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateServiceV1 not implemented")
}
func (UnimplementedServiceAPIServer) DescribeServiceV1(context.Context, *DescribeServiceV1Request) (*DescribeServiceV1Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DescribeServiceV1 not implemented")
}
func (UnimplementedServiceAPIServer) ListServicesV1(context.Context, *empty.Empty) (*ListServicesV1Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListServicesV1 not implemented")
}
func (UnimplementedServiceAPIServer) RemoveServiceV1(context.Context, *RemoveServiceV1Request) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveServiceV1 not implemented")
}
func (UnimplementedServiceAPIServer) MultiCreateServiceV1(context.Context, *MultiCreateServiceV1Request) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MultiCreateServiceV1 not implemented")
}
func (UnimplementedServiceAPIServer) UpdateServiceV1(context.Context, *UpdateServiceV1Request) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateServiceV1 not implemented")
}
func (UnimplementedServiceAPIServer) mustEmbedUnimplementedServiceAPIServer() {}

// UnsafeServiceAPIServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ServiceAPIServer will
// result in compilation errors.
type UnsafeServiceAPIServer interface {
	mustEmbedUnimplementedServiceAPIServer()
}

func RegisterServiceAPIServer(s grpc.ServiceRegistrar, srv ServiceAPIServer) {
	s.RegisterService(&ServiceAPI_ServiceDesc, srv)
}

func _ServiceAPI_CreateServiceV1_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateServiceV1Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceAPIServer).CreateServiceV1(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ova.service.ServiceAPI/CreateServiceV1",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceAPIServer).CreateServiceV1(ctx, req.(*CreateServiceV1Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServiceAPI_DescribeServiceV1_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DescribeServiceV1Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceAPIServer).DescribeServiceV1(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ova.service.ServiceAPI/DescribeServiceV1",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceAPIServer).DescribeServiceV1(ctx, req.(*DescribeServiceV1Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServiceAPI_ListServicesV1_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceAPIServer).ListServicesV1(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ova.service.ServiceAPI/ListServicesV1",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceAPIServer).ListServicesV1(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServiceAPI_RemoveServiceV1_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveServiceV1Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceAPIServer).RemoveServiceV1(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ova.service.ServiceAPI/RemoveServiceV1",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceAPIServer).RemoveServiceV1(ctx, req.(*RemoveServiceV1Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServiceAPI_MultiCreateServiceV1_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MultiCreateServiceV1Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceAPIServer).MultiCreateServiceV1(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ova.service.ServiceAPI/MultiCreateServiceV1",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceAPIServer).MultiCreateServiceV1(ctx, req.(*MultiCreateServiceV1Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServiceAPI_UpdateServiceV1_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateServiceV1Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceAPIServer).UpdateServiceV1(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ova.service.ServiceAPI/UpdateServiceV1",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceAPIServer).UpdateServiceV1(ctx, req.(*UpdateServiceV1Request))
	}
	return interceptor(ctx, in, info, handler)
}

// ServiceAPI_ServiceDesc is the grpc.ServiceDesc for ServiceAPI service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ServiceAPI_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ova.service.ServiceAPI",
	HandlerType: (*ServiceAPIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateServiceV1",
			Handler:    _ServiceAPI_CreateServiceV1_Handler,
		},
		{
			MethodName: "DescribeServiceV1",
			Handler:    _ServiceAPI_DescribeServiceV1_Handler,
		},
		{
			MethodName: "ListServicesV1",
			Handler:    _ServiceAPI_ListServicesV1_Handler,
		},
		{
			MethodName: "RemoveServiceV1",
			Handler:    _ServiceAPI_RemoveServiceV1_Handler,
		},
		{
			MethodName: "MultiCreateServiceV1",
			Handler:    _ServiceAPI_MultiCreateServiceV1_Handler,
		},
		{
			MethodName: "UpdateServiceV1",
			Handler:    _ServiceAPI_UpdateServiceV1_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/ova-service-api/service.proto",
}
